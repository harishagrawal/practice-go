// Test generated by RoostGPT for test practice-go-warriors using AI Type Open AI and AI Model gpt-4


/*
1. Test the function with two identical words to ensure that the function returns 1.
2. Test the function with two completely different words to ensure that the function returns 0.
3. Test the function with two words where one is an anagram of another to ensure that the function returns a value between 0 and 1.
4. Test the function with two words where one is a substring of the other to ensure that the function returns a value between 0 and 1.
5. Test the function with two words where one is the reverse of the other to ensure that the function returns a value between 0 and 1.
6. Test the function with two empty strings to ensure that the function returns 1.
7. Test the function with one empty string and one non-empty string to ensure that the function returns 0.
8. Test the function with two words with varying cases to ensure that the function is case-insensitive.
9. Test the function with two words of different lengths to ensure that the function can handle this scenario.
10. Test the function with non-English characters or symbols to ensure that the function can handle a variety of inputs.
11. Test the function with two very long strings to check the function's performance and see if it can handle large inputs efficiently.
12. Test the function with two words with special characters to see if it handles them correctly.
13. Test the function with two words where one is a palindrome of the other to ensure that the function returns a value between 0 and 1.
14. Test the function with two words where one word is just a repeated character of the other to check how it handles such cases.
15. Test the function with two words where one word has repeated characters and the other does not to check how it handles such cases.
*/
package jaro

import (
	"testing"
)

func TestDistance(t *testing.T) {
	tests := []struct {
		name  string
		word1 string
		word2 string
		want  float64
	}{
		{"identical words", "test", "test", 1},
		{"completely different words", "test", "abcd", 0},
		{"anagram words", "test", "tset", 0.9166666666666666},
		{"substring words", "test", "t", 0.3055555555555556},
		{"reverse words", "test", "tset", 0.9166666666666666},
		{"empty strings", "", "", 1},
		{"one empty string", "", "test", 0},
		{"varying cases", "Test", "test", 1},
		{"different lengths", "test", "testing", 0.6277777777777778},
		{"non-English characters", "tést", "tèst", 0.9166666666666666},
		{"very long strings", "testtesttesttesttesttesttesttesttesttest", "testtesttesttesttesttesttesttesttesttest", 1},
		{"special characters", "test!", "test", 0.9166666666666666},
		{"palindrome words", "test", "tset", 0.9166666666666666},
		{"repeated character words", "tttt", "t", 0.3055555555555556},
		{"one word with repeated characters", "tttt", "test", 0.3055555555555556},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Distance(tt.word1, tt.word2); got != tt.want {
				t.Errorf("Distance() = %v, want %v", got, tt.want)
			}
		})
	}
}
