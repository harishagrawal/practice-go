// Test generated by RoostGPT for test practice-go-nasacollage using AI Type Azure Open AI and AI Model roost-gpt4-32k

package apod_test

import (
	"net/http"
	"regexp"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"apod"
)

func TestScrape(t *testing.T) {
	tt := []struct {
		name    string
		url     string
		regex   string
		err     string
		links   []string
	}{
		{
			name:  "Successful URL and Regexp Input",
			url:   "https://example.com",
			regex: `<a href="([^"]*)">`,
			links: []string{"https://example.com/link1", "https://example.com/link2"},
		},
		{
			name:  "Invalid URL Input",
			url:   "::::",
			regex: `<a href="([^"]*)">`,
			err:   "parse ::::: missing protocol scheme",
		},
		{
			name:  "Empty URL String",
			url:   "",
			regex: `<a href="([^"]*)">`,
			err:   "parse \"\": empty url",
		},
		{
			name:  "Unreachable URL",
			url:   "http://unreachable.com",
			regex: `<a href="([^"]*)">`,
			err:   "Get \"http://unreachable.com\": dial tcp: lookup unreachable.com: no such host",
		},
		{
			name:  "Empty Regexp Input",
			url:   "https://example.com",
			regex: "",
			links: []string{"https://example.com/link1", "https://example.com/link2"},
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			re := regexp.MustCompile(tc.regex)
			links, err := apod.Scrape(tc.url, re)

			if tc.err != "" {
				require.Error(t, err)
				assert.Equal(t, tc.err, err.Error())
			} else {
				require.NoError(t, err)
				assert.ElementsMatch(t, tc.links, links)
			}
		})
	}
}
