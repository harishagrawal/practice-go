// Test generated by RoostGPT for test practice-go-nasacollage using AI Type Azure Open AI and AI Model roost-gpt4-32k

package collage_test

import (
	"bytes"
	"strings"
	"testing"
	"collage"
)

func TestCombinations(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name   string
		n      int
		k      int
		output string
	}{
		{"Valid integers where n > k > 0", 5, 3, "[[0 1 2] [0 1 3] [0 1 4] [0 2 3] [0 2 4] [0 3 4] [1 2 3] [1 2 4] [1 3 4] [2 3 4]]"},
		{"n = k > 0", 3, 3, "[[0 1 2]]"},
		{"n < k", 2, 3, "[]"},
		{"n = 0 and k > 0", 0, 1, "[]"},
		{"n > 0 and k = 0", 6, 0, ""},
		{"n = k = 0", 0, 0, ""},
		{"negative integers for n and/or k", -5, 3, ""},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var b bytes.Buffer
			function := func(a []int) {
				for _, v := range a {
					b.WriteString(string(v))
					b.WriteString(" ")
				}
				b.WriteString("\n")
			}
			collage.Combinations(tt.n, tt.k, function)

			got := strings.TrimRight(b.String(), "\n")

			if got != tt.output {
				t.Errorf("got: %v, want: %v", got, tt.output)
			}
		})
	}
}

func BenchmarkCombinations(b *testing.B) {
	// large numbers for n and k
	function := func(a []int) {}
	for i := 0; i < b.N; i++ {
		collage.Combinations(1000, 500, function)
	}
}
