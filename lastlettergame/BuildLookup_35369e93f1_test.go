// Test generated by RoostGPT for test practice-go-warriors using AI Type Open AI and AI Model gpt-4


/*
1. Test case where `dic` is an empty slice. The function should return an empty slice as well.

2. Test case where `dic` contains a single string. The function should return a two-dimensional slice where the first dimension contains a single element (an empty slice) and the second dimension contains a slice with a single element that is 0.

3. Test case where `dic` contains multiple strings, but none of them start with the last letter of any other string in `dic`. The function should return a two-dimensional slice where the first dimension contains slices for each string in `dic`, all of which are empty, and the second dimension contains a slice with the indices of the strings in `dic`.

4. Test case where `dic` contains multiple strings and at least one of them starts with the last letter of another string in `dic`. The function should return a two-dimensional slice where the first dimension contains slices for each string in `dic`, some of which contain the indices of other strings, and the second dimension contains a slice with the indices of the strings in `dic`.

5. Test case where `dic` contains multiple strings and all of them start with the last letter of another string in `dic`. The function should return a two-dimensional slice where the first dimension contains slices for each string in `dic`, all of which contain the indices of other strings, and the second dimension contains a slice with the indices of the strings in `dic`.

6. Test case where `dic` contains multiple identical strings. The function should return a two-dimensional slice where the first dimension contains slices for each string in `dic`, all of which are empty, and the second dimension contains a slice with the indices of the strings in `dic`.

7. Test case where `dic` contains multiple strings, some of which are identical and some of which start with the last letter of another string in `dic`. The function should return a two-dimensional slice where the first dimension contains slices for each string in `dic`, some of which contain the indices of other strings, and the second dimension contains a slice with the indices of the strings in `dic`.

8. Test case where `dic` contains a large number of strings. This is to test the function's performance and ensure that it can handle large inputs efficiently.
*/
package lastlettergame_test

import (
	"reflect"
	"testing"

	"lastlettergame"
)

func TestBuildLookup(t *testing.T) {
	tests := []struct {
		name string
		dic  []string
		want [][]int
	}{
		{
			name: "Test case where dic is an empty slice",
			dic:  []string{},
			want: [][]int{{}},
		},
		{
			name: "Test case where dic contains a single string",
			dic:  []string{"apple"},
			want: [][]int{{}, {0}},
		},
		{
			name: "Test case where dic contains multiple strings without match",
			dic:  []string{"apple", "banana", "cherry"},
			want: [][]int{{}, {}, {}, {0, 1, 2}},
		},
		{
			name: "Test case where dic contains multiple strings with at least one match",
			dic:  []string{"apple", "elephant", "tree"},
			want: [][]int{{1}, {}, {}, {0, 1, 2}},
		},
		{
			name: "Test case where dic contains multiple strings and all of them match",
			dic:  []string{"apple", "elephant", "tree", "elephant"},
			want: [][]int{{1, 3}, {2}, {1, 3}, {0, 1, 2, 3}},
		},
		{
			name: "Test case where dic contains multiple identical strings",
			dic:  []string{"apple", "apple", "apple"},
			want: [][]int{{}, {}, {}, {0, 1, 2}},
		},
		{
			name: "Test case where dic contains multiple strings, some of which are identical and some of which match",
			dic:  []string{"apple", "elephant", "tree", "apple"},
			want: [][]int{{1, 3}, {2}, {1, 3}, {0, 1, 2, 3}},
		},
		// Add a test case for large input if necessary.
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := lastlettergame.BuildLookup(tt.dic); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("BuildLookup() = %v, want %v", got, tt.want)
			}
		})
	}
}
