// Test generated by RoostGPT for test practice-go-warriors using AI Type Open AI and AI Model gpt-4


/*
Test Scenario 1: 
Test the FindAnagrams function with an empty dictionary. The function should return an empty list. 

Test Scenario 2: 
Test the FindAnagrams function with a dictionary that contains words that are anagrams of the input word. The function should return a list with these words.

Test Scenario 3: 
Test the FindAnagrams function with a dictionary that does not contain words that are anagrams of the input word. The function should return an empty list.

Test Scenario 4: 
Test the FindAnagrams function with a dictionary that contains the input word itself. The function should not return the input word as an anagram.

Test Scenario 5: 
Test the FindAnagrams function with a dictionary that contains words with different cases that are anagrams of the input word. The function should return these words in their original casing.

Test Scenario 6: 
Test the FindAnagrams function with an input word that has special characters or numbers. The function should return an empty list as these characters are not considered while finding anagrams.

Test Scenario 7: 
Test the FindAnagrams function with a dictionary that contains words with special characters or numbers. The function should ignore these characters while finding anagrams.

Test Scenario 8: 
Test the FindAnagrams function with an empty string as the input word. The function should return an empty list.

Test Scenario 9: 
Test the FindAnagrams function with a dictionary that contains empty strings. The function should ignore these strings while finding anagrams.

Test Scenario 10: 
Test the FindAnagrams function with a dictionary that contains words with whitespace. The function should ignore the whitespace while finding anagrams.
*/
package anagram

import (
	"reflect"
	"testing"
)

func TestFindAnagrams(t *testing.T) {
	tests := []struct {
		name       string
		dictionary []string
		word       string
		expected   []string
	}{
		{
			name:       "Test Scenario 1: Empty dictionary",
			dictionary: []string{},
			word:       "listen",
			expected:   []string{},
		},
		{
			name:       "Test Scenario 2: Dictionary contains anagrams",
			dictionary: []string{"enlist", "inlets", "google", "banana"},
			word:       "listen",
			expected:   []string{"enlist", "inlets"},
		},
		{
			name:       "Test Scenario 3: Dictionary does not contain anagrams",
			dictionary: []string{"google", "banana", "apple"},
			word:       "listen",
			expected:   []string{},
		},
		{
			name:       "Test Scenario 4: Dictionary contains the input word",
			dictionary: []string{"listen", "enlist", "inlets"},
			word:       "listen",
			expected:   []string{"enlist", "inlets"},
		},
		{
			name:       "Test Scenario 5: Dictionary contains anagrams with different cases",
			dictionary: []string{"Enlist", "Inlets", "Google", "Banana"},
			word:       "listen",
			expected:   []string{"Enlist", "Inlets"},
		},
		{
			name:       "Test Scenario 6: Word with special characters",
			dictionary: []string{"enlist", "inlets", "google", "banana"},
			word:       "li$ten",
			expected:   []string{},
		},
		{
			name:       "Test Scenario 7: Dictionary contains words with special characters",
			dictionary: []string{"enli$t", "inl@ts", "google", "banana"},
			word:       "listen",
			expected:   []string{},
		},
		{
			name:       "Test Scenario 8: Empty string as input word",
			dictionary: []string{"enlist", "inlets", "google", "banana"},
			word:       "",
			expected:   []string{},
		},
		{
			name:       "Test Scenario 9: Dictionary contains empty strings",
			dictionary: []string{"", "enlist", "inlets"},
			word:       "listen",
			expected:   []string{"enlist", "inlets"},
		},
		{
			name:       "Test Scenario 10: Dictionary contains words with whitespace",
			dictionary: []string{" enlist", "inlets ", " google", " banana "},
			word:       "listen",
			expected:   []string{" enlist", "inlets "},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := FindAnagrams(test.dictionary, test.word)
			if !reflect.DeepEqual(result, test.expected) {
				t.Errorf("Expected %v, got %v", test.expected, result)
			}
		})
	}
}
