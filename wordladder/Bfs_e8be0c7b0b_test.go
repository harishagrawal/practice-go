// Test generated by RoostGPT for test practice-go using AI Type Open AI and AI Model gpt-4

package wordladder_test

import (
	"testing"
	"github.com/eapache/queue"
	"github.com/stretchr/testify/assert"
	"wordladder"
)

func TestBfs(t *testing.T) {
	tests := []struct {
		name   string
		adj    [][]int
		s      int
		t      int
		expect int
	}{
		{
			name:   "Direct path",
			adj:    [][]int{{1, 2}, {2, 3}, {3, 4}},
			s:      1,
			t:      2,
			expect: 2,
		},
		{
			name:   "Multiple paths",
			adj:    [][]int{{1, 2, 3}, {2, 3}, {3, 4}},
			s:      1,
			t:      4,
			expect: 3,
		},
		{
			name:   "Same node",
			adj:    [][]int{{1, 2}, {2, 3}, {3, 4}},
			s:      2,
			t:      2,
			expect: 1,
		},
		{
			name:   "No path",
			adj:    [][]int{{1, 2}, {2, 3}, {3, 4}},
			s:      1,
			t:      5,
			expect: 0,
		},
		{
			name:   "Empty graph",
			adj:    [][]int{},
			s:      1,
			t:      2,
			expect: 0,
		},
		{
			name:   "Graph with cycle",
			adj:    [][]int{{1, 2}, {2, 3}, {3, 1}},
			s:      1,
			t:      3,
			expect: 2,
		},
		{
			name:   "Out of range",
			adj:    [][]int{{1, 2}, {2, 3}, {3, 4}},
			s:      5,
			t:      6,
			expect: 0,
		},
		{
			name:   "Large graph",
			adj:    [][]int{{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}},
			s:      1,
			t:      10,
			expect: 10,
		},
		{
			name:   "Null adjacency matrix",
			adj:    nil,
			s:      1,
			t:      2,
			expect: 0,
		},
		{
			name:   "Negative values",
			adj:    [][]int{{1, 2}, {2, 3}, {3, 4}},
			s:      -1,
			t:      -2,
			expect: 0,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := wordladder.Bfs(tt.adj, tt.s, tt.t)
			assert.Equal(t, tt.expect, result, tt.name)
		})
	}
}
