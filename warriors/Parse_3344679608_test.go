// Test generated by RoostGPT for test practice-go-warriors using AI Type Open AI and AI Model gpt-4


/*
1. Scenario: Check if the function correctly parses a string that contains a single digit.
   - Input: "1"
   - Expected Output: [[1]]

2. Scenario: Check if the function correctly handles multiple digits in a single row.
   - Input: "123"
   - Expected Output: [[1,2,3]]

3. Scenario: Check if the function correctly handles multiple rows of single digits.
   - Input: "1\n2\n3"
   - Expected Output: [[1], [2], [3]]

4. Scenario: Check if the function correctly handles multiple rows of multiple digits.
   - Input: "12\n34"
   - Expected Output: [[1,2], [3,4]]

5. Scenario: Check if the function correctly handles a string that contains non-numeric characters.
   - Input: "1a2\n3b4"
   - Expected Output: [[1, -48, 2], [3, -49, 4]]

6. Scenario: Check if the function correctly handles an empty string.
   - Input: ""
   - Expected Output: [[]]

7. Scenario: Check if the function correctly handles a string with only newline characters.
   - Input: "\n\n"
   - Expected Output: [[], []]

8. Scenario: Check if the function correctly handles a string with spaces.
   - Input: "1 2\n3 4"
   - Expected Output: [[1, -16, 2], [3, -16, 4]]

9. Scenario: Check if the function correctly handles a string that contains a mix of digits, non-numeric characters, spaces, and newline characters.
   - Input: "1a 2\n3b 4"
   - Expected Output: [[1, -48, -16, 2], [3, -49, -16, 4]]

10. Scenario: Check if the function correctly handles a string with digits and special characters.
    - Input: "1@2#3$4"
    - Expected Output: [[1, -14, 2, -13, 3, -12, 4]]
*/
package warriors

import (
	"reflect"
	"testing"
)

func TestParse(t *testing.T) {
	tt := []struct {
		name   string
		input  string
		output [][]int
	}{
		{
			name:   "Check single digit",
			input:  "1",
			output: [][]int{{1}},
		},
		{
			name:   "Check multiple digits in a single row",
			input:  "123",
			output: [][]int{{1, 2, 3}},
		},
		{
			name:   "Check multiple rows of single digits",
			input:  "1\n2\n3",
			output: [][]int{{1}, {2}, {3}},
		},
		{
			name:   "Check multiple rows of multiple digits",
			input:  "12\n34",
			output: [][]int{{1, 2}, {3, 4}},
		},
		{
			name:   "Check non-numeric characters",
			input:  "1a2\n3b4",
			output: [][]int{{1, -48, 2}, {3, -49, 4}},
		},
		{
			name:   "Check empty string",
			input:  "",
			output: [][]int{{}},
		},
		{
			name:   "Check only newline characters",
			input:  "\n\n",
			output: [][]int{{}, {}},
		},
		{
			name:   "Check a string with spaces",
			input:  "1 2\n3 4",
			output: [][]int{{1, -16, 2}, {3, -16, 4}},
		},
		{
			name:   "Check mix of digits, non-numeric characters, spaces, and newline characters",
			input:  "1a 2\n3b 4",
			output: [][]int{{1, -48, -16, 2}, {3, -49, -16, 4}},
		},
		{
			name:   "Check a string with digits and special characters",
			input:  "1@2#3$4",
			output: [][]int{{1, -14, 2, -13, 3, -12, 4}},
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			res := parse(tc.input)
			if !reflect.DeepEqual(res, tc.output) {
				t.Fatalf("Expected %v, but got %v", tc.output, res)
			}
		})
	}
}
