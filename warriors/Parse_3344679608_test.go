// Test generated by RoostGPT for test practice-go-warriors using AI Type Azure Open AI and AI Model roostgpt-4-32k

package warriors

import (
	"testing"
	"reflect"
)

func TestParse(t *testing.T) {
	tests := []struct {
		name  string
		image string
		want  [][]int
	}{
		{
			name:  "empty string",
			image: "",
			want:  make([][]int, 1),
		},
		{
			name:  "single line string with digits",
			image: "12345",
			want:  [][]int{{1, 2, 3, 4, 5}},
		},
		{
			name:  "multi-line string with digits",
			image: "123\n456\n789",
			want:  [][]int{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {}},
		},
		{
			name:  "single line string with non-digits",
			image: "1a2b3c",
			want:  [][]int{{1, 'a' - '0', 2, 'b' - '0', 3, 'c' - '0'}},
		},
		{
			name:  "multi-line string with non-digits",
			image: "123\n4a5\nb6c",
			want:  [][]int{{1, 2, 3}, {4, 'a' - '0', 5}, {'b' - '0', 6, 'c' - '0'}, {}},
		},
		{
			name:  "multi-line string with varying line lengths",
			image: "12\n3456\n789",
			want:  [][]int{{1, 2}, {3, 4, 5, 6}, {7, 8, 9}, {}},
		},
		{
			name:  "string with special characters",
			image: "\n\t \n",
			want:  [][]int{{'\n' - '0'}, {'\t' - '0', ' ' - '0'}, {'\n' - '0'}, {}},
		},
		{
			name:  "string with newlines only",
			image: "\n\n\n",
			want:  make([][]int, 4),
		},
		{
			name:  "string ends with newline",
			image: "123\n",
			want:  [][]int{{1, 2, 3}, {}},
		},
		{
			name:  "extremely long string",
			image: strings.Repeat("1", 1e6),
			want:  [][]int{strings.Repeat(int('1' - '0'), 1e6)},
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			if got := parse(tc.image); !reflect.DeepEqual(got, tc.want) {
				t.Errorf("parse() = %v, want %v", got, tc.want)
			}
		})
	}
}
