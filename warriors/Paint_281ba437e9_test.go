// Test generated by RoostGPT for test practice-go-warriors using AI Type Azure Open AI and AI Model roostgpt-4-32k

package warriors_test

import (
	"testing"
	"fmt"
	"bytes"
	"os"
	"github.com/your/repo/path/warriors"
)

// captureOutput captures function stdout
func captureOutput(f func() int) string {
	r, w, _ := os.Pipe()
	os.Stdout = w

	outC := make(chan string)
	// copy the output in a separate goroutine so printing can't block indefinitely
	go func() {
		var buf bytes.Buffer
		io.Copy(&buf, r)
		outC <- buf.String()
	}()

	f()

	w.Close()
	os.Stdout = os.Default
	out := <- outC

	return out
}

func TestPaint(t *testing.T) {
	tt := []struct {
		name           string
		color, pointJ, pointI int
		image          [][]int
		expected       [][]int
	}{
		{
			name:     "Test Paint with color 0",
			color:    0,
			pointJ:   0,
			pointI:   0,
			image:    [][]int{{1, 1}, {1, 1}},
			expected:[][]int{{0, 0}, {0, 1}},
		},
		{
			name:     "Test Paint with negative color",
			color:    -2,
			pointJ:   0,
			pointI:   0,
			image:    [][]int{{1, 1}, {1, 1}},
			expected: [][]int{{-2, -2}, {-2, 1}},
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			img := tc.image
			warriors.paint(tc.color, tc.pointJ, tc.pointI, img)

			for i, row := range img {
				for j, pixel := range row {
					if pixel != tc.expected[i][j] {
						t.Fatalf("Expected pixel at [%d][%d] to be %d but got %d", i, j, tc.expected[i][j], pixel)
					}
				}
			}
		})
	}
}
